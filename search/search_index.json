{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f","text":"<p>\u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb.</p> <p>\u0420\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u041f\u044f\u0442\u044b\u0433\u043e \u0414. \u0410., \u0433\u0440\u0443\u043f\u043f\u0430 K33421.</p>"},{"location":"lab_1/auth/","title":"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f","text":"<p>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u043a\u0432\u0438\u0437\u0438\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u043e \u0441  \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u044f.</p> <p>\u0414\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0431\u044b\u043b\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0445\u044d\u0448\u0443 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0440\u0438 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0439  \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u0432\u044b\u0434\u0430\u0451\u0442\u0441\u044f JWT-\u0442\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0440\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u0445.</p> auth.py <pre><code>import os\nfrom datetime import datetime, timedelta\nfrom dotenv import load_dotenv\nimport jwt\nfrom passlib.context import CryptContext\nload_dotenv()\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nSECRET_KEY = os.getenv(\"SECRET_KEY\")\nALGORITHM = \"HS256\"\ndef hash_password(password: str):\nreturn pwd_context.hash(password)\ndef verify_password(plain_password, hashed_password):\nreturn pwd_context.verify(plain_password, hashed_password)\ndef create_access_token(data: dict, expires_delta: timedelta = timedelta(minutes=15)):\nto_encode = data.copy()\nexpire = datetime.utcnow() + expires_delta\nto_encode.update({\"exp\": expire})\nencoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\nreturn encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\ntry:\npayload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\nreturn payload\nexcept jwt.PyJWTError:\nraise credentials_exception\n</code></pre>"},{"location":"lab_1/conclusion/","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u044f \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043b\u0441\u044f \u0441 \u043d\u043e\u0432\u044b\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 FastAPI. \u041c\u043e\u0449\u043d\u044b\u0439, \u043b\u0451\u0433\u043a\u0438\u0439  \u0438 \u0433\u0438\u0431\u043a\u0438\u0439, \u043e\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0441\u043e\u0437\u0434\u0430\u043b \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435,  \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u043e \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435.</p>"},{"location":"lab_1/db/","title":"\u0421\u0445\u0435\u043c\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u0414\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u0431\u044b\u043b\u0430 \u0441\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0445\u0435\u043c\u0430:</p> <p></p> <p>\u0412 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e 5 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439:</p> <ul> <li>\u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430</li> <li>\u041a\u043e\u043c\u0430\u043d\u0434\u044b</li> <li>\u0425\u0430\u043a\u0430\u0442\u043e\u043d\u044b</li> <li>\u0417\u0430\u0434\u0430\u0447\u0438</li> <li>\u0420\u0435\u0448\u0435\u043d\u0438\u044f</li> </ul> <p>\u0421\u0432\u044f\u0437\u044c many-to-many \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 \u0438 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430\u043c\u0438. \u0414\u043b\u044f \u043d\u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0430 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0445\u0440\u0430\u043d\u0438\u0442  \u0432 \u0441\u0435\u0431\u0435 id \u043a\u043e\u043c\u0430\u043d\u0434\u044b, id \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u0438 \u0434\u0430\u0442\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d.</p> <p>\u0422\u0430\u043a\u0436\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 <code>User</code> \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</p> <p>\u0412 FastAPI-\u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0444\u0430\u0439\u043b\u044b <code>schemas.py</code> \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 SQLModel-\u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0434\u043b\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438  \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 <code>models.py</code> \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.</p> schemas.py <pre><code>from datetime import datetime\nfrom enum import Enum\nfrom sqlmodel import SQLModel\nfrom typing import List, Optional\nclass ApproveStatus(str, Enum):\ngathering = \"Gathering\"\ncompleted = \"Completed\"\npending = \"Pending\"\napproved = \"Approved\"\nrejected = \"Rejected\"\nclass SubmissionStatus(str, Enum):\npending = \"Pending\"\napproved = \"Approved\"\nrejected = \"Rejected\"\nclass Skill(str, Enum):\nprogramming = \"Programming\"\ndesign = \"Design\"\ndata_analysis = \"Data Analysis\"\nmarketing = \"Marketing\"\nmanagement = \"Management\"\nother = \"Other\"\nclass TeamBase(SQLModel):\nname: str\napprove_status: ApproveStatus\nclass ParticipantBase(SQLModel):\nfull_name: str\nnickname: str\nemail: str\nphone: str\nskill: Skill\nclass HackathonBase(SQLModel):\ntitle: str\ndescription: str\nstart_date: datetime\nend_date: datetime\nclass TaskBase(SQLModel):\ntitle: str\ndescription: str\nrequirements: str\nevaluation_criteria: str\nclass SubmissionBase(SQLModel):\ncode: Optional[str]\nfile_url: Optional[str]\nstatus: SubmissionStatus\nclass UserBase(SQLModel):\nusername: str\nemail: str\npassword: str\nclass Token(SQLModel):\naccess_token: str\ntoken_type: str\nclass ParticipantResponse(ParticipantBase):\nid: Optional[int]\nclass Config:\nfrom_attributes = True\nclass TeamResponse(TeamBase):\nparticipants: List[ParticipantResponse] = []\nclass Config:\nfrom_attributes = True\nclass TaskResponse(TaskBase):\nid: Optional[int]\nclass Config:\nfrom_attributes = True\nclass HackathonResponse(HackathonBase):\ntasks: List[TaskResponse] = []\nclass Config:\nfrom_attributes = True\nclass UserResponse(SQLModel):\nid: Optional[int]\nusername: str\nemail: str\nclass Config:\nfrom_attributes = True\nclass ChangePasswordBody(SQLModel):\nold_password: str\nnew_password: str\n</code></pre> models.py <pre><code>from datetime import datetime\nfrom typing import List, Optional\nfrom sqlmodel import Field, Relationship, SQLModel\nfrom schemas import TeamBase, ParticipantBase, HackathonBase, TaskBase, SubmissionBase, UserBase\nclass Team(TeamBase, table=True):\nid: Optional[int] = Field(default=None, primary_key=True)\nhackathons: List[\"TeamHackathon\"] = Relationship(back_populates=\"team\")\nparticipants: List[\"Participant\"] = Relationship(back_populates=\"team\")\nsubmissions: List[\"Submission\"] = Relationship(back_populates=\"team\")\nclass Participant(ParticipantBase, table=True):\nid: Optional[int] = Field(default=None, primary_key=True)\nteam_id: Optional[int] = Field(foreign_key=\"team.id\")\nteam: Team = Relationship(back_populates=\"participants\")\nclass Hackathon(HackathonBase, table=True):\nid: Optional[int] = Field(default=None, primary_key=True)\nteams: List[\"TeamHackathon\"] = Relationship(back_populates=\"hackathon\")\ntasks: List[\"Task\"] = Relationship(back_populates=\"hackathon\")\nclass TeamHackathon(SQLModel, table=True):\nteam_id: int = Field(foreign_key=\"team.id\", primary_key=True)\nhackathon_id: int = Field(foreign_key=\"hackathon.id\", primary_key=True)\nregistration_date: datetime\nteam: Team = Relationship(back_populates=\"hackathons\")\nhackathon: Hackathon = Relationship(back_populates=\"teams\")\nclass Task(TaskBase, table=True):\nid: Optional[int] = Field(default=None, primary_key=True)\nhackathon_id: int = Field(foreign_key=\"hackathon.id\")\nhackathon: Hackathon = Relationship(back_populates=\"tasks\")\nsubmissions: List[\"Submission\"] = Relationship(back_populates=\"task\")\nclass Submission(SubmissionBase, table=True):\nid: Optional[int] = Field(default=None, primary_key=True)\ntask_id: int = Field(foreign_key=\"task.id\")\ntask: Task = Relationship(back_populates=\"submissions\")\nteam_id: int = Field(foreign_key=\"team.id\")\nteam: Team = Relationship(back_populates=\"submissions\")\nclass User(UserBase, table=True):\nid: Optional[int] = Field(default=None, primary_key=True)\nTeam.update_forward_refs()\nParticipant.update_forward_refs()\nHackathon.update_forward_refs()\nTeamHackathon.update_forward_refs()\nTask.update_forward_refs()\nSubmission.update_forward_refs()\n</code></pre>"},{"location":"lab_1/endpoints/","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432","text":"<p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u043e\u0434 \u0444\u0430\u0439\u043b\u0430 <code>main.py</code>, \u0433\u0434\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0432\u0435\u0441\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u0431\u044d\u043a:</p> <pre><code>import datetime\nimport os\nfrom typing import List\nimport jwt\nfrom dotenv import load_dotenv\nfrom fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom sqlmodel import Session, create_engine, select\nfrom sqlalchemy.orm import selectinload\nimport auth\nimport models\nimport schemas\nload_dotenv()\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\nengine = create_engine(DATABASE_URL)\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\napp = FastAPI()\ndef get_session():\nwith Session(engine) as session:\nyield session\ndef get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_session)):\ncredentials_exception = HTTPException(\nstatus_code=status.HTTP_401_UNAUTHORIZED,\ndetail=\"Could not validate credentials\",\nheaders={\"WWW-Authenticate\": \"Bearer\"},\n)\ntry:\npayload = jwt.decode(token, auth.SECRET_KEY, algorithms=[auth.ALGORITHM])\nusername: str = payload.get(\"sub\")\nif username is None:\nraise credentials_exception\nexcept jwt.PyJWTError:\nraise credentials_exception\nuser = db.exec(select(models.User).where(models.User.username == username)).first()\nif user is None:\nraise credentials_exception\nreturn user\ndef authenticate_user(db: Session, username: str, password: str):\nstatement = select(models.User).where(models.User.username == username)\nuser = db.exec(statement).first()\nif not user or not auth.verify_password(password, user.password):\nreturn False\nreturn user\n@app.post(\"/register/\", response_model=schemas.UserBase)\ndef create_user(user: schemas.UserBase, db: Session = Depends(get_session)):\nstatement = select(models.User).where(models.User.username == user.username)\nresult = db.exec(statement).first()\nif result:\nraise HTTPException(status_code=400, detail=\"Username already used\")\nhashed_password = auth.hash_password(user.password)\ndb_user = models.User(username=user.username, email=user.email, password=hashed_password)\ndb.add(db_user)\ndb.commit()\ndb.refresh(db_user)\nreturn db_user\n@app.post(\"/token/\", response_model=schemas.Token)\ndef login_for_access_token(db: Session = Depends(get_session), form_data: OAuth2PasswordRequestForm = Depends()):\nuser = authenticate_user(db, form_data.username, form_data.password)\nif not user:\nraise HTTPException(\nstatus_code=status.HTTP_401_UNAUTHORIZED,\ndetail=\"Invalid credentials\",\nheaders={\"WWW-Authenticate\": \"Bearer\"},\n)\naccess_token = auth.create_access_token(data={\"sub\": user.username})\nreturn {\"access_token\": access_token, \"token_type\": \"bearer\"}\n@app.get(\"/users/me/\", response_model=schemas.UserResponse)\ndef about_me(current_user: models.User = Depends(get_current_user)):\nreturn current_user\n@app.get(\"/users/\", response_model=List[schemas.UserResponse])\ndef get_users(db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nusers = db.exec(select(models.User)).all()\nreturn users\n@app.patch(\"/users/me/change_password/\")\ndef change_password(change_password: schemas.ChangePasswordBody, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nif not auth.verify_password(change_password.old_password, current_user.password):\nraise HTTPException(status_code=400, detail=\"Old password is incorrect\")\ncurrent_user.password = auth.hash_password(change_password.new_password)\ndb.commit()\nreturn {\"msg\": \"Password updated\"}\n@app.post(\"/participants/\", response_model=schemas.ParticipantBase)\ndef create_participant(participant: schemas.ParticipantBase, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\ndb_participant = models.Participant(**participant.dict())\ndb.add(db_participant)\ndb.commit()\ndb.refresh(db_participant)\nreturn db_participant\n@app.post(\"/teams/\", response_model=schemas.TeamBase)\ndef create_team(team: schemas.TeamBase, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\ndb_team = models.Team(**team.dict())\ndb.add(db_team)\ndb.commit()\ndb.refresh(db_team)\nreturn db_team\n@app.get(\"/teams/\", response_model=List[schemas.TeamResponse])\ndef get_teams(db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nteams = db.exec(select(models.Team).options(selectinload(models.Team.participants))).all()\nreturn teams\n@app.get(\"/teams/{team_id}/\", response_model=schemas.TeamResponse)\ndef get_team(team_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nteam = db.exec(select(models.Team).where(models.Team.id == team_id).options(selectinload(models.Team.participants))).first()\nif not team:\nraise HTTPException(status_code=404, detail=\"Team not found\")\nreturn team\n@app.patch(\"/teams/{team_id}/participants/\")\ndef add_participant_to_team(team_id: int, participant_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nteam = db.exec(select(models.Team).where(models.Team.id == team_id)).first()\nif not team:\nraise HTTPException(status_code=404, detail=\"Team not found\")\nparticipant = db.exec(select(models.Participant).where(models.Participant.id == participant_id)).first()\nif not participant:\nraise HTTPException(status_code=404, detail=\"Participant not found\")\nparticipant.team_id = team.id\ndb.commit()\nreturn {\"msg\": \"Participant added to the team\"}\n@app.get(\"/teams/{team_id}/participants/\", response_model=List[schemas.ParticipantBase])\ndef get_team_participants(team_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nparticipants = db.exec(select(models.Participant).where(models.Participant.team_id == team_id)).all()\nreturn participants\n@app.patch(\"/teams/{team_id}/status/\")\ndef update_team_status(team_id: int, status: schemas.ApproveStatus, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nteam = db.exec(select(models.Team).where(models.Team.id == team_id)).first()\nif not team:\nraise HTTPException(status_code=404, detail=\"Team not found\")\nteam.approve_status = status\ndb.commit()\nreturn {\"msg\": \"Team status updated\"}\n@app.post(\"/hackathons/\")\ndef create_hackathon(hackathon: schemas.HackathonBase, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\ndb_hackathon = models.Hackathon(**hackathon.dict())\ndb.add(db_hackathon)\ndb.commit()\ndb.refresh(db_hackathon)\nreturn db_hackathon\n@app.get(\"/hackathons/\", response_model=List[schemas.HackathonResponse])\ndef get_hackathons(db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nhackathons = db.exec(select(models.Hackathon).options(selectinload(models.Hackathon.tasks))).all()\nreturn hackathons\n@app.get(\"/hackathons/{hackathon_id}/\", response_model=schemas.HackathonResponse)\ndef get_hackathon(hackathon_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nhackathon = db.exec(select(models.Hackathon).where(models.Hackathon.id == hackathon_id).options(selectinload(models.Hackathon.tasks))).first()\nif not hackathon:\nraise HTTPException(status_code=404, detail=\"Hackathon not found\")\nreturn hackathon\n@app.post(\"/hackathons/{hackathon_id}/teams/\")\ndef add_team_to_hackathon(hackathon_id: int, team_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nhackathon = db.exec(select(models.Hackathon).where(models.Hackathon.id == hackathon_id)).first()\nif not hackathon:\nraise HTTPException(status_code=404, detail=\"Hackathon not found\")\nteam = db.exec(select(models.Team).where(models.Team.id == team_id)).first()\nif not team:\nraise HTTPException(status_code=404, detail=\"Team not found\")\ndb_team_hackathon = models.TeamHackathon(hackathon_id=hackathon.id, team_id=team.id,\nregistration_date=datetime.datetime.now())\ndb.add(db_team_hackathon)\ndb.commit()\nreturn {\"msg\": \"Team added to the hackathon\"}\n@app.get(\"/hackathons/{hackathon_id}/teams/\", response_model=List[schemas.TeamBase])\ndef get_hackathon_teams(hackathon_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nteams = db.exec(select(models.Team).join(models.TeamHackathon).where(models.TeamHackathon.hackathon_id == hackathon_id)).all()\nreturn teamsx\n@app.get(\"/teams/{team_id}/hackathons/\", response_model=List[schemas.HackathonBase])\ndef get_team_hackathons(team_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nhackathons = db.exec(select(models.Hackathon).join(models.TeamHackathon).where(models.TeamHackathon.team_id == team_id)).all()\nreturn hackathons\n@app.delete(\"/hackathons/{hackathon_id}/teams/{team_id}/\")\ndef remove_team_from_hackathon(hackathon_id: int, team_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nteam_hackathon = db.exec(select(models.TeamHackathon).where(models.TeamHackathon.hackathon_id == hackathon_id,\nmodels.TeamHackathon.team_id == team_id)).first()\nif not team_hackathon:\nraise HTTPException(status_code=404, detail=\"Team not found in the hackathon\")\ndb.delete(team_hackathon)\ndb.commit()\nreturn {\"msg\": \"Team removed from the hackathon\"}\n@app.post(\"/hackathons/{hackathon_id}/tasks/\")\ndef create_task(hackathon_id: int, task: schemas.TaskBase, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\ndb_task = models.Task(**task.dict(), hackathon_id=hackathon_id)\ndb.add(db_task)\ndb.commit()\ndb.refresh(db_task)\nreturn db_task\n@app.get(\"/hackathons/{hackathon_id}/tasks/\", response_model=List[schemas.TaskBase])\ndef get_hackathon_tasks(hackathon_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\ntasks = db.exec(select(models.Task).where(models.Task.hackathon_id == hackathon_id)).all()\nreturn tasks\n@app.put(\"/hackathons/{hackathon_id}/tasks/{task_id}/\")\ndef update_task(hackathon_id: int, task_id: int, task: schemas.TaskBase, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\ndb_task = db.exec(select(models.Task).where(models.Task.id == task_id, models.Task.hackathon_id == hackathon_id)).first()\nif not db_task:\nraise HTTPException(status_code=404, detail=\"Task not found\")\nfor key, value in task.dict().items():\nsetattr(db_task, key, value)\ndb.commit()\ndb.refresh(db_task)\nreturn db_task\n@app.delete(\"/hackathons/{hackathon_id}/tasks/{task_id}/\")\ndef delete_task(hackathon_id: int, task_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\ndb_task = db.exec(select(models.Task).where(models.Task.id == task_id, models.Task.hackathon_id == hackathon_id)).first()\nif not db_task:\nraise HTTPException(status_code=404, detail=\"Task not found\")\ndb.delete(db_task)\ndb.commit()\nreturn {\"msg\": \"Task deleted\"}\n@app.post(\"/teams/{team_id}/tasks/{task_id}/submissions/\")\ndef create_submission(hackathon_id: int, team_id: int, task_id: int, submission: schemas.SubmissionBase, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\ndb_submission = models.Submission(**submission.dict(), hackathon_id=hackathon_id, team_id=team_id, task_id=task_id)\ndb.add(db_submission)\ndb.commit()\ndb.refresh(db_submission)\nreturn db_submission\n@app.get(\"/teams/{team_id}/tasks/{task_id}/submissions/\", response_model=List[schemas.SubmissionBase])\ndef get_team_submissions(hackathon_id: int, team_id: int, task_id: int, db: Session = Depends(get_session), current_user: models.User = Depends(get_current_user)):\nsubmissions = db.exec(select(models.Submission).where(models.Submission.hackathon_id == hackathon_id,\nmodels.Submission.team_id == team_id,\nmodels.Submission.task_id == task_id)).all()\nreturn submissions\n</code></pre>"},{"location":"lab_1/main/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI","text":""},{"location":"lab_1/main/#_1","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432. \u0425\u0430\u043a\u0430\u0442\u043e\u043d \u2014 \u044d\u0442\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b, \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u044b \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b,  \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0440\u0435\u0448\u0430\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u043d\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u0438. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:</p> <ul> <li> <p>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d, \u0443\u043a\u0430\u0437\u0430\u0432 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435  (\u0438\u043c\u044f, \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b, \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0438 \u0442. \u0434.). \u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435  \u043e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432.</p> </li> <li> <p>\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c\u0441\u044f \u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c.  \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 (\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0434\u0438\u0437\u0430\u0439\u043d, \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433 \u0438 \u0442. \u0434.).</p> </li> <li> <p>\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447: \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0431\u0443\u0434\u0443\u0442  \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438.</p> </li> <li> <p>\u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0431\u043e\u0442: \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438.</p> </li> </ul>"},{"location":"lab_1/main/#_2","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","text":"<p>\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439 1</p> <p>\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439 2</p> <p>\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043a\u043e\u043c\u043c\u0438\u0442 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439 3</p>"},{"location":"lab_1/migrations/","title":"\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 Alembic","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 Alembic \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b <code>alembic init alembic</code> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432  \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b.</p> <p>\u0412 \u0444\u0430\u0439\u043b\u0435 <code>alembic.ini</code> \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435 \u0441 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f\u043c\u0438:</p> <pre><code>sqlalchemy.url = env:DATABASE_URL\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0435\u0433\u043e \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 <code>.env</code>, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0430\u043a\u0435\u0442 <code>python-dotenv</code> \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434  \u0432 <code>env.py</code>:</p> <pre><code># ...\nfrom dotenv import load_dotenv\nload_dotenv()\n# ...\nconfig.set_main_option(\"sqlalchemy.url\", os.getenv(\"DATABASE_URL\"))\n</code></pre> <p>\u0422\u0430\u043a\u0436\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u043c\u043f\u043e\u0440\u0442 SQLModel \u0432 \u0444\u0430\u0439\u043b <code>script.py.mako</code> \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439.</p> <p>\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0438\u0436\u0435.</p> alembic.ini <pre><code># A generic, single database configuration.\n[alembic]\n# path to migration scripts\nscript_location = alembic\n# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s\n# Uncomment the line below if you want the files to be prepended with date and time\n# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file\n# for all available tokens\n# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s\n# sys.path path, will be prepended to sys.path if present.\n# defaults to the current working directory.\nprepend_sys_path = .\n# timezone to use when rendering the date within the migration file\n# as well as the filename.\n# If specified, requires the python&gt;=3.9 or backports.zoneinfo library.\n# Any required deps can installed by adding `alembic[tz]` to the pip requirements\n# string value is passed to ZoneInfo()\n# leave blank for localtime\n# timezone =\n# max length of characters to apply to the\n# \"slug\" field\n# truncate_slug_length = 40\n# set to 'true' to run the environment during\n# the 'revision' command, regardless of autogenerate\n# revision_environment = false\n# set to 'true' to allow .pyc and .pyo files without\n# a source .py file to be detected as revisions in the\n# versions/ directory\n# sourceless = false\n# version location specification; This defaults\n# to alembic/versions.  When using multiple version\n# directories, initial revisions must be specified with --version-path.\n# The path separator used here should be the separator specified by \"version_path_separator\" below.\n# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions\n# version path separator; As mentioned above, this is the character used to split\n# version_locations. The default within new alembic.ini files is \"os\", which uses os.pathsep.\n# If this key is omitted entirely, it falls back to the legacy behavior of splitting on spaces and/or commas.\n# Valid values for version_path_separator are:\n#\n# version_path_separator = :\n# version_path_separator = ;\n# version_path_separator = space\nversion_path_separator = os  # Use os.pathsep. Default configuration used for new projects.\n# set to 'true' to search source files recursively\n# in each \"version_locations\" directory\n# new in Alembic version 1.10\n# recursive_version_locations = false\n# the output encoding used when revision files\n# are written from script.py.mako\n# output_encoding = utf-8\nsqlalchemy.url = env:DATABASE_URL\n[post_write_hooks]\n# post_write_hooks defines scripts or Python functions that are run\n# on newly generated revision scripts.  See the documentation for further\n# detail and examples\n# format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint\n# hooks = black\n# black.type = console_scripts\n# black.entrypoint = black\n# black.options = -l 79 REVISION_SCRIPT_FILENAME\n# lint with attempts to fix using \"ruff\" - use the exec runner, execute a binary\n# hooks = ruff\n# ruff.type = exec\n# ruff.executable = %(here)s/.venv/bin/ruff\n# ruff.options = --fix REVISION_SCRIPT_FILENAME\n# Logging configuration\n[loggers]\nkeys = root,sqlalchemy,alembic\n[handlers]\nkeys = console\n[formatters]\nkeys = generic\n[logger_root]\nlevel = WARN\nhandlers = console\nqualname =\n[logger_sqlalchemy]\nlevel = WARN\nhandlers =\nqualname = sqlalchemy.engine\n[logger_alembic]\nlevel = INFO\nhandlers =\nqualname = alembic\n[handler_console]\nclass = StreamHandler\nargs = (sys.stderr,)\nlevel = NOTSET\nformatter = generic\n[formatter_generic]\nformat = %(levelname)-5.5s [%(name)s] %(message)s\ndatefmt = %H:%M:%S\n</code></pre> env.py <pre><code>import os\nfrom sqlmodel import SQLModel\nfrom models import Team, Participant, Hackathon, TeamHackathon, Task, Submission\nfrom logging.config import fileConfig\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\nfrom alembic import context\nfrom dotenv import load_dotenv\nload_dotenv()\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\nfileConfig(config.config_file_name)\nconfig.set_main_option(\"sqlalchemy.url\", os.getenv(\"DATABASE_URL\"))\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = SQLModel.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -&gt; None:\n\"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\nurl = config.get_main_option(\"sqlalchemy.url\")\ncontext.configure(\nurl=url,\ntarget_metadata=target_metadata,\nliteral_binds=True,\ndialect_opts={\"paramstyle\": \"named\"},\n)\nwith context.begin_transaction():\ncontext.run_migrations()\ndef run_migrations_online() -&gt; None:\n\"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\nconnectable = engine_from_config(\nconfig.get_section(config.config_ini_section, {}),\nprefix=\"sqlalchemy.\",\npoolclass=pool.NullPool,\n)\nwith connectable.connect() as connection:\ncontext.configure(\nconnection=connection, target_metadata=target_metadata\n)\nwith context.begin_transaction():\ncontext.run_migrations()\nif context.is_offline_mode():\nrun_migrations_offline()\nelse:\nrun_migrations_online()\n</code></pre> script.py.mako <pre><code>\"\"\"${message}\nRevision ID: ${up_revision}\nRevises: ${down_revision | comma,n}\nCreate Date: ${create_date}\n\"\"\"\nfrom typing import Sequence, Union\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlmodel\n${imports if imports else \"\"}\n# revision identifiers, used by Alembic.\nrevision: str = ${repr(up_revision)}\ndown_revision: Union[str, None] = ${repr(down_revision)}\nbranch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}\ndepends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}\ndef upgrade() -&gt; None:\n${upgrades if upgrades else \"pass\"}\ndef downgrade() -&gt; None:\n${downgrades if downgrades else \"pass\"}\n</code></pre>"},{"location":"lab_2/conclusion/","title":"\u0412\u044b\u0432\u043e\u0434","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0438 \u0438\u0437\u0443\u0447\u0435\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u0432 Python. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u043e  \u043e\u0442\u0442\u043e\u0447\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430, \u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2 \u2014 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435.</p>"},{"location":"lab_2/task_1/","title":"\u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python","text":""},{"location":"lab_2/task_1/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"lab_2/task_1/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"<p>\u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0437\u0430\u043c\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b <code>lab_2_S_2</code> \u0431\u044b\u043b\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f-\u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440:</p> mark_time.py <pre><code>import time\ndef mark_time(func):\ndef wrapper(*args, **kwargs):\nstart_time = time.time()\nresult = func(*args, **kwargs)\nend_time = time.time()\nprint(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {end_time - start_time} \u0441\u0435\u043a\u0443\u043d\u0434.\")\nreturn result\nreturn wrapper\n</code></pre> <p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0443\u043c\u043c\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading, multiprocessing \u0438 async:</p> \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f <pre><code>from lab_2_S2.mark_time import mark_time\n@mark_time\ndef calculate_sum(n=1000000):\ns = 0\nfor i in range(1, n + 1):\ns += i\nreturn s\nif __name__ == \"__main__\":\nprint(calculate_sum())\n</code></pre> Threading <pre><code>import threading\nfrom lab_2_S2.mark_time import mark_time\ndef calculate_part_sum(start, end, results, idx):\ns = 0\nfor i in range(start, end + 1):\ns += i\nresults[idx] = s\n@mark_time\ndef calculate_sum(n=1000000, n_threads=4):\nresults = [0] * n_threads\nthreads = []\nstep = n // n_threads\nfor i in range(n_threads):\nstart = i * step + 1\nif i == n_threads - 1:\nend = n\nelse:\nend = (i + 1) * step\n# \u0421\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430\nthread = threading.Thread(\ntarget=calculate_part_sum, args=(start, end, results, i)\n)\nthreads.append(thread)\nthread.start()\n# \u0414\u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0441\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432\n# \u041d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0445 \u0441\u0443\u043c\u043c \u0431\u044b\u043b\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0432 results\nfor thread in threads:\nthread.join()\nreturn sum(results)\nif __name__ == \"__main__\":\nprint(calculate_sum())\n</code></pre> Multiprocessing <pre><code>import multiprocessing\nfrom lab_2_S2.mark_time import mark_time\ndef calculate_part_sum(start, end):\ns = 0\nfor i in range(start, end + 1):\ns += i\nreturn s\n@mark_time\ndef calculate_sum(n=1000000, n_processes=4):\nwith multiprocessing.Pool(n_processes) as pool:\nstep = n // n_processes\nranges = [\n(i * step + 1, n)\nif i == n_processes - 1\nelse (i * step + 1, (i + 1) * step)\nfor i in range(n_processes)\n]\n# \u0417\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b\nresults = pool.starmap(calculate_part_sum, ranges)\nreturn sum(results)\nif __name__ == \"__main__\":\nprint(calculate_sum())\n</code></pre> Async <pre><code>import asyncio\nfrom lab_2_S2.mark_time import mark_time\nasync def calculate_part_sum(start, end):\ns = 0\nfor i in range(start, end + 1):\ns += i\nreturn s\n@mark_time\nasync def calculate_sum(n=1000000, n_steps=4):\nstep = n // n_steps\nranges = [\n(i * step + 1, n) if i == n_steps - 1 else (i * step + 1, (i + 1) * step)\nfor i in range(n_steps)\n]\n# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\nresults = await asyncio.gather(*[calculate_part_sum(*range_) for range_ in ranges])\nreturn sum(results)\nif __name__ == \"__main__\":\nprint(asyncio.run(calculate_sum()))\n</code></pre>"},{"location":"lab_2/task_1/#_3","title":"\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u043d\u0430\u043c\u0435\u0440\u0435\u043d\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0446\u0438\u043a\u043b\u0430, \u0430 \u043d\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 Python, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a <code>sum</code>  \u0438\u043b\u0438 <code>range</code>. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430\u043c\u0438.</p> <p>\u0412\u043e \u0432\u0441\u0435\u0445 \u0442\u0440\u0451\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f <code>calculate_part_sum</code>, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0447\u0438\u0441\u0435\u043b \u0432  \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u041e\u043d\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438\u043b\u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.</p> <p>\u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a\u0438, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443. \u041f\u043e\u0441\u043b\u0435  \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u0443\u043c\u043c\u0430\u043c\u0438. \u0412 \u043a\u043e\u043d\u0446\u0435 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b.</p> <p>\u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c multiprocessing \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443.  \u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043e\u0442 1 \u0434\u043e 1000000 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 n \u0440\u0430\u0432\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439, \u0433\u0434\u0435 n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>starmap</code>  \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438. \u0412 \u043a\u043e\u043d\u0446\u0435 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b.</p> <p>\u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c async \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0447\u0438\u0441\u0435\u043b. \u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447  \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445.</p>"},{"location":"lab_2/task_1/#_4","title":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441) \u041d\u0430\u0438\u0432\u043d\u044b\u0439 0.0655 Threading 0.0552 Multiprocessing 0.8154 Async 0.1473 <p>\u0421\u0430\u043c\u044b\u043c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u043c \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f threading, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0438\u0437-\u0437\u0430 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0442\u043e\u043a\u043e\u0432. \u041f\u043e  \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0439 \u043f\u0440\u0438\u0447\u0438\u043d\u0435 multiprocessing \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c.</p> <p>\u0412 \u0446\u0435\u043b\u043e\u043c, \u0432 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u043d\u0435\u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0432\u0430\u043d\u0438\u0435 (\u0445\u043e\u0442\u044f \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0435\u0433\u043e \u043d\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432  \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u044f\u0445), \u0430 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u00ab\u043d\u0430\u0438\u0432\u043d\u044b\u043c\u0438\u00bb \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u043b\u0443\u0447\u0448\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445  \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 Python.</p>"},{"location":"lab_2/task_2/","title":"\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445","text":""},{"location":"lab_2/task_2/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441  \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445  \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"lab_2/task_2/#_2","title":"\u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u21161. \u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439  \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u0445 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432, \u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u0445, \u0441\u0430\u043c\u0438\u0445 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430\u0445, \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445 \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u0445.</p> <p>\u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u0432 \u043e\u0442\u043a\u0440\u044b\u0442\u043e\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u0435 \u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u0439\u0442\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u043b\u0438 API \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b\u043e  \u0440\u0435\u0448\u0435\u043d\u043e \u0441\u043c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e.</p> <p>\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u043d\u0435 \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0441\u044f \u0441 \u0442\u0435\u043c, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 web-\u0441\u0435\u0440\u0432\u0438\u0441, \u0438 \u0440\u0435\u0448\u0438\u043b \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f  \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0433\u0443\u0433\u043b-\u0444\u043e\u0440\u043c\u044b. \u0412 \u043d\u0435\u0439 \u043e\u043d \u0441\u043e\u0431\u0440\u0430\u043b \u0434\u0430\u043d\u043d\u044b\u0435,  \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0435\u0433\u043e \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d. \u041a\u0430\u043a \u0438\u0442\u043e\u0433, \u043c\u044b  \u0438\u043c\u0435\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432 \u0411\u0414.</p> <p>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438:</p> <ol> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0433\u0443\u0433\u043b-\u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435</li> <li>\u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0438\u0445</li> <li>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432</li> <li>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u044b</li> </ol> <p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0437\u0430\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u043c \u0448\u0430\u0433\u0438 3 \u0438 4 (\u0448\u0430\u0433 2 \u043e\u0441\u0442\u0430\u0432\u0438\u043c, \u043a\u0430\u043a \u0435\u0441\u0442\u044c, \u0432 \u0446\u0435\u043b\u044f\u0445 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u0438  \u0434\u0430\u043d\u043d\u044b\u0445). \u0414\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0432 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161.</p>"},{"location":"lab_2/task_2/#_3","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"\u041d\u0430\u0438\u0432\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 <pre><code>import time\nimport gspread\nfrom google.oauth2.service_account import Credentials\nimport requests\ndef init_google_sheet(url, creds_path=\"creds.json\"):\nSCOPES = [\"https://www.googleapis.com/auth/spreadsheets\"]\ncreds = Credentials.from_service_account_file(creds_path, scopes=SCOPES)\ngc = gspread.authorize(creds)\nsh = gc.open_by_url(url)\nreturn sh\ndef get_token(username=\"dptgo\", password=\"iloveweb\"):\nurl = \"http://localhost:8000/token/\"\nresponse = requests.post(url, data={\"username\": username, \"password\": password})\nreturn response.json()[\"access_token\"]\ndef get_teams(token):\nurl = \"http://localhost:8000/teams/\"\nheaders = {\"Authorization\": f\"Bearer {token}\"}\nresponse = requests.get(url, headers=headers)\nreturn response.json()\ndef get_participants(token):\nurl = \"http://localhost:8000/participants/\"\nheaders = {\"Authorization\": f\"Bearer {token}\"}\nresponse = requests.get(url, headers=headers)\nreturn response.json()\ndef create_team(token, team_name):\nurl = \"http://localhost:8000/teams/\"\nheaders = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"}\ndata = {\"name\": team_name, \"approve_status\": \"Gathering\"}\nresponse = requests.post(url, json=data, headers=headers)\nif response.status_code != 200:\nprint(\"Failed to create team:\", response.status_code, response.json())\nreturn response.json()\ndef parse_participant(row):\nreturn {\n\"full_name\": row[\"\u0424\u0418\u041e\"],\n\"nickname\": row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"],\n\"email\": row[\"E-mail\"],\n\"phone\": \"+\" + str(row[\"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430\"]),\n\"skill\": row[\"\u041e\u0442\u043c\u0435\u0442\u044c\u0442\u0435 \u0432\u0430\u0448 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u043d\u0430\u0432\u044b\u043a\"],\n}\ndef create_participant(token, participant):\nurl = \"http://localhost:8000/participants/\"\nheaders = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"}\ndata = parse_participant(participant)\nresponse = requests.post(url, json=data, headers=headers)\nif response.status_code != 200:\nprint(\"Failed to create participant:\", response.status_code, response.json())\nreturn response.json()\ndef add_participant_to_team(token, team_id, participant_id):\nurl = f\"http://localhost:8000/teams/{team_id}/participants/\"\nheaders = {\"Authorization\": f\"Bearer {token}\"}\nparams = {\"participant_id\": participant_id}\nresponse = requests.patch(url, params=params, headers=headers)\nif response.status_code != 200:\nprint(\n\"Failed adding participant to team:\", response.status_code, response.json()\n)\nreturn response.json()\nif __name__ == \"__main__\":\nstart_time = time.time()\nurl = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\"\nsh = init_google_sheet(url)\nworksheet = sh.sheet1\ndata = worksheet.get_all_records()\ntoken = get_token()\nexisting_teams = get_teams(token)\nteam_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"])\nfor team_name in team_names:\nif team_name not in [team[\"name\"] for team in existing_teams]:\ncreate_team(token, team_name)\nteams = get_teams(token)\nteam_mapping = {team[\"name\"]: team[\"id\"] for team in teams}\nfor row in data:\ncreate_participant(token, row)\nparticipants = get_participants(token)\nparticipants_mapping = {\nparticipant[\"nickname\"]: participant[\"id\"] for participant in participants\n}\nfor row in data:\nif row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]:\nadd_participant_to_team(\ntoken,\nteam_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]],\nparticipants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]],\n)\nprint(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start_time} \u0441\u0435\u043a\u0443\u043d\u0434.\")\n</code></pre> Threading <pre><code>from lab_2_S2.mark_time import mark_time\nfrom parser_naive import *\nfrom threading import Thread\ndef create_participants(token, data, n_threads=5):\ndef task(batch):\nfor row in batch:\ncreate_participant(token, row)\ndef chunks(lst, n):\nfor i in range(0, len(lst), n):\nyield lst[i : i + n]\nbatch_size = len(data) // n_threads + (len(data) % n_threads &gt; 0)\nbatches = list(chunks(data, batch_size))\nthreads = []\nfor batch in batches:\nthread = Thread(target=task, args=(batch,))\nthread.start()\nthreads.append(thread)\nfor thread in threads:\nthread.join()\ndef add_participants_to_teams(\ntoken, data, team_mapping, participants_mapping, n_threads=5\n):\ndef task(batch):\nfor row in batch:\nteam_id = team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]]\nparticipant_id = participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]]\nadd_participant_to_team(token, team_id, participant_id)\ndef chunks(lst, n):\nfor i in range(0, len(lst), n):\nyield lst[i : i + n]\nbatch_size = len(data) // n_threads + (len(data) % n_threads &gt; 0)\nbatches = list(chunks(data, batch_size))\nthreads = []\nfor batch in batches:\nthread = Thread(target=task, args=(batch,))\nthread.start()\nthreads.append(thread)\nfor thread in threads:\nthread.join()\n@mark_time\ndef parse_and_save():\nurl = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\"\nsh = init_google_sheet(url)\nworksheet = sh.sheet1\ndata = worksheet.get_all_records()\ntoken = get_token()\nexisting_teams = get_teams(token)\nteam_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"])\nfor team_name in team_names:\nif team_name not in [team[\"name\"] for team in existing_teams]:\ncreate_team(token, team_name)\nteams = get_teams(token)\nteam_mapping = {team[\"name\"]: team[\"id\"] for team in teams}\ncreate_participants(token, data)\nparticipants = get_participants(token)\nparticipants_mapping = {\nparticipant[\"nickname\"]: participant[\"id\"] for participant in participants\n}\nadd_participants_to_teams(token, data, team_mapping, participants_mapping)\nif __name__ == \"__main__\":\nparse_and_save()\n</code></pre> Multiprocessing <pre><code>from lab_2_S2.mark_time import mark_time\nfrom parser_naive import *\nimport multiprocessing\ndef process_participants(token, batch):\nfor row in batch:\ncreate_participant(token, row)\ndef create_participants(token, data, n_processes=5):\ndef chunks(lst, n):\nfor i in range(0, len(lst), n):\nyield lst[i : i + n]\nbatch_size = len(data) // n_processes + (len(data) % n_processes &gt; 0)\nbatches = list(chunks(data, batch_size))\nwith multiprocessing.Pool(n_processes) as pool:\npool.starmap(process_participants, [(token, batch) for batch in batches])\ndef process_teams(token, batch, team_mapping, participants_mapping):\nfor row in batch:\nteam_id = team_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]]\nparticipant_id = participants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]]\nadd_participant_to_team(token, team_id, participant_id)\ndef add_participants_to_teams(\ntoken, data, team_mapping, participants_mapping, n_processes=5\n):\ndef chunks(lst, n):\nfor i in range(0, len(lst), n):\nyield lst[i : i + n]\nbatch_size = len(data) // n_processes + (len(data) % n_processes &gt; 0)\nbatches = list(chunks(data, batch_size))\nwith multiprocessing.Pool(n_processes) as pool:\npool.starmap(\nprocess_teams,\n[(token, batch, team_mapping, participants_mapping) for batch in batches],\n)\n@mark_time\ndef parse_and_save():\nurl = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\"\nsh = init_google_sheet(url)\nworksheet = sh.sheet1\ndata = worksheet.get_all_records()\ntoken = get_token()\nexisting_teams = get_teams(token)\nteam_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"])\nfor team_name in team_names:\nif team_name not in [team[\"name\"] for team in existing_teams]:\ncreate_team(token, team_name)\nteams = get_teams(token)\nteam_mapping = {team[\"name\"]: team[\"id\"] for team in teams}\ncreate_participants(token, data)\nparticipants = get_participants(token)\nparticipants_mapping = {\nparticipant[\"nickname\"]: participant[\"id\"] for participant in participants\n}\nadd_participants_to_teams(token, data, team_mapping, participants_mapping)\nif __name__ == \"__main__\":\nparse_and_save()\n</code></pre> Async <pre><code>import aiohttp\nimport asyncio\nfrom parser_naive import *\nasync def create_participant(session, token, participant):\nurl = \"http://localhost:8000/participants/\"\nheaders = {\"Authorization\": f\"Bearer {token}\", \"Content-Type\": \"application/json\"}\ndata = parse_participant(participant)\nasync with session.post(url, json=data, headers=headers) as response:\nreturn await response.json(), response.status\nasync def create_participants(token, data):\nasync with aiohttp.ClientSession() as session:\ntasks = [\ncreate_participant(session, token, participant) for participant in data\n]\nawait asyncio.gather(*tasks)\nasync def add_participant_to_team(session, token, team_id, participant_id):\nurl = f\"http://localhost:8000/teams/{team_id}/participants/\"\nheaders = {\"Authorization\": f\"Bearer {token}\"}\nparams = {\"participant_id\": participant_id}\nasync with session.patch(url, params=params, headers=headers) as response:\nreturn await response.json(), response.status\nasync def add_participants_to_teams(token, data, team_mapping, participants_mapping):\nasync with aiohttp.ClientSession() as session:\ntasks = [\nadd_participant_to_team(\nsession,\ntoken,\nteam_mapping[row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"]],\nparticipants_mapping[row[\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c\"]],\n)\nfor row in data\n]\nawait asyncio.gather(*tasks)\nasync def parse_and_save():\nurl = \"https://docs.google.com/spreadsheets/d/1mQN3GROxytwL-8Y_Hi9Gxrf3XeP9Kqe7SzII6SajWSo\"\nsh = init_google_sheet(url)\nworksheet = sh.sheet1\ndata = worksheet.get_all_records()\ntoken = get_token()\nexisting_teams = get_teams(token)\nteam_names = set(row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"] for row in data if row[\"\u041a\u043e\u043c\u0430\u043d\u0434\u0430\"])\nfor team_name in team_names:\nif team_name not in [team[\"name\"] for team in existing_teams]:\ncreate_team(token, team_name)\nteams = get_teams(token)\nteam_mapping = {team[\"name\"]: team[\"id\"] for team in teams}\nawait create_participants(token, data)\nparticipants = get_participants(token)\nparticipants_mapping = {\nparticipant[\"nickname\"]: participant[\"id\"] for participant in participants\n}\nawait add_participants_to_teams(token, data, team_mapping, participants_mapping)\nif __name__ == \"__main__\":\nstart_time = time.time()\nasyncio.run(parse_and_save())\nprint(f\"\u041e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start_time} \u0441\u0435\u043a\u0443\u043d\u0434.\")\n</code></pre>"},{"location":"lab_2/task_2/#_4","title":"\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0412 \u00ab\u043d\u0430\u0438\u0432\u043d\u043e\u043c\u00bb \u043f\u0430\u0440\u0441\u0435\u0440\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0433\u0443\u0433\u043b-\u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c (\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438  <code>gspread</code>, <code>google.oauth2</code>) \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043d\u0430\u0448\u0435\u043c\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0418\u0445 \u0432\u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0438 \u0431\u0443\u0434\u0435\u043c \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u044b.</p> <p>\u0412 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c <code>threading</code> \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0431\u0430\u0442\u0447\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c  \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u044d\u0442\u0438 \u0431\u0430\u0442\u0447\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445.</p> <p>\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u043e\u0434\u0445\u043e\u0434 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c <code>multiprocessing</code>, \u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b.</p> <p>\u0412 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 <code>aiohttp</code> \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442  \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432, \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0431\u0430\u0442\u0447\u0438 \u2014 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.</p>"},{"location":"lab_2/task_2/#_5","title":"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f","text":"\u041f\u043e\u0434\u0445\u043e\u0434 \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f (\u0441) \u041d\u0430\u0438\u0432\u043d\u044b\u0439 4.5526 Threading 3.6526 Multiprocessing 6.5502 Async 3.8700 <p>\u041b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c threading \u0438 async, \u043e\u043d\u0438 \u0445\u043e\u0440\u043e\u0448\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0434\u043b\u044f I/O-bound \u0437\u0430\u0434\u0430\u0447.  Multiprocessing \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043d\u0430\u0438\u043c\u0435\u043d\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f CPU-bound \u0437\u0430\u0434\u0430\u0447, \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438  \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.</p>"}]}